



/**
 * @param {String[][]} grid
 * @return {Number}
 */
function numIslands(grid) {
    if (grid.length <= 0) {
        return 0;
    }
    const LAND = "1";
    const MAX_COL = grid[0].length;
    const MAX_ROW = grid.length;

    let lands = 0;
    for (let row = 0; row < MAX_ROW; row++) {
        for (let col = 0; col < MAX_COL; col++) {
            if (grid[row][col] == LAND) {
                bfsTravelIsLands(grid, [row, col]);
                lands++;
            }
        }
    }
    return lands;
};


/**
 * @param {String[][]} grid 地图
 * @param {landPoint} entrance 入口坐标
 * @description 广度优先搜索将 "1"一块搜索完并标记为"0"
 */
function bfsTravelIsLands(grid, entrance) {
    const MAX_COL = grid[0].length;
    const MAX_ROW = grid.length;

    let queue = [];
    let row = 0, col = 0, coordinate = null;

    const visit = (r, c) => {
        grid[r][c] = '0';
    }

    const pushToQueue = (r, c) => {
        queue.push([r, c]);
    }

    queue.push(entrance);
    while (queue.length > 0) {
        // 取出队列第一个
        coordinate = queue.shift();
        col = coordinate[1];
        row = coordinate[0];

        // 标记已访问
        visit(row, col);

        // 遍历周围
        // 向右搜索
        if (col + 1 < MAX_COL && grid[row][col + 1] == "1") {
            visit(row, col + 1);
            pushToQueue(row, col + 1);
        }
        // 向左搜索
        if (col - 1 >= 0 && grid[row][col - 1] == "1") {
            visit(row, col - 1);
            pushToQueue(row, col - 1);
        }
        // 向上搜索
        if (row - 1 >= 0 && grid[row - 1][col] == "1") {
            visit(row - 1, col);
            pushToQueue(row -1, col);
        }
        // 向下搜索
        if (row + 1 < MAX_ROW && grid[row + 1][col] == "1") {
            visit(row + 1, col);
            pushToQueue(row + 1, col);
        }
    }
}


function main() {
    let m = [
        ["1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1"],
        ["0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "0"],
        ["1", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1"],
        ["0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["0", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1"],
        ["1", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1", "1"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "0"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
        ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"]
    ];
    console.time("label");
    console.log(numIslands(m));
    console.timeEnd("label");
}
main();